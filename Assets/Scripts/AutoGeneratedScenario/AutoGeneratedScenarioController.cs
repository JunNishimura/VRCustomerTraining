using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class AutoGeneratedScenarioController : MonoBehaviour
{
    public GameObject[] _emptyPlates;
    public GameObject[] _foods; // FOOD_ARRAYと同じ順番になるように格納すること
    public GameObject[] _tables; // テーブル1-6を順番に格納
    public GameObject[] _avatars; // _avatars[0]はテーブル1のアバターに対応

    [SerializeField] CleanPlateJudge _cleanPlageJudge;
    [SerializeField] GameObject _playerEye;

    Speech_Recognition_Manager _speechRecManager;
    EnterCube[] _enterCubes = new EnterCube[6]; // enterCubeをテーブル1から6にかけて順番に格納
    Animator[] _animators = new Animator[6]; // animatorをアバター1から6にかけて順番に格納
    GuideList _guideList;
    List<double> _taskFinishedTimeList;
    List<int> _dialogueProgressList; // 各シナリオの会話の進行具合を格納したリスト
    int _enteredTableNum = -1; // Playerが前に立っているテーブル番号。テーブル前にいない時は-1。
    bool _isInEnterCube = false; // EnterCubeの中にいるかのフラグ
    double _elapsedTime; // 経過時間

    // シナリオ生成関連
    List<Dictionary<string, string>> _generatedScenarioList;
    List<int> _usedTableList;
    List<int> _usedFoodList;
    int _scenarioCount;
    //string[] SCENARIO_ARRAY = new string[] { "注文", "入店", "クレーム応対", "片付け", "配膳" };
    string[] SCENARIO_ARRAY = new string[] { "注文" };
    string[] FOOD_ARRAY = new string[] { "サンドウィッチセット", "ピザ", "パンケーキ", "ハンバーガーセット", "チョコレートケーキ", "バゲットセット" };

    // -----attention----- //
    /* 
    1. FlagManagerについて
    FlagManagerのフラグ番号は自動生成されたシナリオ番号と一致させる。
    シナリオが4つの場合は0-3のフラグ番号を各シナリオ完了番号と見なす。
    そして最後に全接客完了を加える（上の場合、フラグ番号4を全接客完了番号とする）。
    */

    void Start()
    {
        ScenarioGenerate();
        //GeneratedScenarioLog(); // 生成されたシナリオの確認
        AvatarActivate();
        EmptyPlatesActivate();
        FoodArrange();
        BGMActivate();

        // EnterCubeの初期化
        for (int i = 0; i < _tables.Length; i++)
        {
            _enterCubes[i] = _tables[i].GetComponentInChildren<EnterCube>();
        }

        // _animatorsの初期化
        for (int i = 0; i < _avatars.Length; i++)
        {
            _animators[i] = _avatars[i].GetComponent<Animator>();
        }

        // 注文顧客の手を挙げる
        foreach (var scenario in _generatedScenarioList)
        {
            if (scenario["task"] == "注文")
            {
                int tableNum = int.Parse(scenario["table"]);
                _animators[tableNum].SetBool("updown", true);
            }
        }

        // ガイドパネルの初期化
        _guideList = Resources.Load("GuideList") as GuideList;
        UIManager.Instance.guide.text = _guideList.sheets[5].list[0].guide;

        // ヒントパネルの初期化
        UIManager.Instance.hint1.text =
            "接客での注意点\n" +
            "・接客順序は、早く処理できる業務から行いましょう\n" +
            "・複数のお客様から呼び出された場合に、先に呼ばれたお客様から対応しましょう\n" +
            "・配膳はオーダー表の順に配膳するようにしましょう\n" +
            "・済んでいる皿を見かけたら声をかけ積極的に片付けましょう\n" +
            "・デザートがある場合、食事済みを確認したらすぐに配膳しましょう\n";
        UIManager.Instance.hint2.text =
            "・注文した料理はお客さんの前に置くようにしましょう\n" +
            "・済んだ皿はカウンターへ戻しましょう\n" +
            "・持ってきた料理名をお客さんに伝えましょう\n" +
            "・お客様を待たせてしまう場合には、「少々お待ちください」と声かけを行いましょう\n" +
            "・注文を取り終えた際には、注文を復唱してお客様に確認しましょう。\n" +
            "・配膳後には注文が以上であるかを確認しましょう\n";
        UIManager.Instance.hint3.text =
            "操作方法\n" +
            "・右Touchの下のボタン(Aボタン)：発話した直後に押すことでシナリオが進行\n" +
            "・右Touchの上のボタン(Bボタン)：ポーズ\n" +
            "・左Touchの下のボタン(Xボタン)：ガイドパネルの表示非表示の切り替え\n" +
            "・左Touchの上のボタン(Yボタン)：ヒントパネルの表示非表示の切り替え(全3ページ)\n" +
            "・中指にあるボタン(グリップ)：手を料理・皿の方へ向けて持つ\n" +
            "・左スティック：テレポート移動\n" +
            "・右スティック：テレポート移動後のキャラクターの向きを変更する";

        // オーダーパネルの初期化
        InitializeOrderTable();

        // フラグマネージャーの初期化
        FlagManager.Instance.ResetFlags();

        // 音声認識クラスの起動
        if (Application.internetReachability == NetworkReachability.NotReachable)
        {
            _speechRecManager = null;
        }
        else
        {
            _speechRecManager = new Speech_Recognition_Manager();
            _speechRecManager.startRecognition();
        }

        // 接客終了時間を格納するリストの初期化
        _taskFinishedTimeList = new List<double>();

        // 会話進行リストの初期化
        InitializeDialogueProgressList();
    }

    void Update()
    {
        // 経過時間の更新
        _elapsedTime = Time.time;

        // 各シナリオの処理
        for (int scenarioNum = 0; scenarioNum < _generatedScenarioList.Count; scenarioNum++)
        {
            var scenario = _generatedScenarioList[scenarioNum];
            int tableNum = int.Parse(scenario["table"]);

            // シナリオが片付けの場合
            if (scenario["task"] == "片付け")
            {
                // 片付けが終了していない状態で、テーブル前に入った瞬間の1回のみ以下を実行
                if (_enterCubes[tableNum].GetEnter() == 1 && !_isInEnterCube && !FlagManager.Instance.flags[scenarioNum])
                {
                    // フラグの更新
                    _isInEnterCube = true;

                    // 入ったテーブル番号の更新
                    _enteredTableNum = tableNum;

                    // ガイドパネルを更新
                    int listNum = tableNum + 1;
                    GuidePanelUpdate(5, listNum);
                }

                // テーブルから皿が片づけられたかの判定
                string plateName = "Plate" + (tableNum+1).ToString(); // tableNumは0-5でplateの名前は1-6だから+1する
                if (_cleanPlageJudge.IsPlatePicked(plateName) && !FlagManager.Instance.flags[scenarioNum])
                {
                    // 片付け完了
                    FlagManager.Instance.flags[scenarioNum] = true;
                    // 終了時間の格納
                    _taskFinishedTimeList.Add(_elapsedTime);
                }

                // テーブル前にいる状態から、離れたら以下を実行
                if (_enteredTableNum > 0 && _enterCubes[_enteredTableNum].GetEnter() == 0 && _isInEnterCube)
                {
                    _isInEnterCube = false;
                    _enteredTableNum = -1;
                }
            }
            else if (scenario["task"] == "配膳") // シナリオが配膳の場合
            {
                // プレイヤーが顧客を見ているかの判定
                if (_enterCubes[tableNum].GetEnter() == 1 && IsPlayerLookAtCustomer(_avatars[tableNum]))
                {
                    // 音声認識完了チェック
                    if (Speech_Recognition_Manager.rec_complete)
                    {
                        if (FlagManager.Instance.flags[scenarioNum]) // タスクが完了していたら、Bボタン表示するだけ
                        {
                            ABbuttonUpdate(false);
                        }
                        else
                        {
                            ABbuttonUpdate(true); // Aボタン表示
                            if (OVRInput.GetDown(OVRInput.RawButton.A))
                            {
                                ABbuttonUpdate(false); // Bボタン表示
                                string foodName = FOOD_ARRAY[int.Parse(scenario["food"])];
                                switch (_dialogueProgressList[scenarioNum])
                                {
                                    case 0:
                                        // 適当な料理が運ばれたかの判定
                                        if (_enterCubes[tableNum].GetObjectName().Contains(foodName))
                                        {
                                            // 適当な料理が運ばれたとき
                                            AudioManager.Instance.PlayVoice("1-10");
                                            GuidePanelUpdate(5, 7); // 「料理をテーブルに置き、注文が以上であることを確認しましょう」
                                            _dialogueProgressList[scenarioNum] += 1; // 会話進行具合の更新
                                        }
                                        else
                                        {
                                            //間違えた料理を持ってきた場合
                                            AudioManager.Instance.PlayVoice("e1_nanami"); // 「その料理は頼んでいません」
                                        }

                                        break;
                                    case 1:
                                        AudioManager.Instance.PlayVoice("1-11");
                                        GuidePanelUpdate(5, 8); // 「一言述べてから次の接客へ移りましょう。他に接客すべき人がいないか観察しましょう」
                                        FlagManager.Instance.flags[scenarioNum] = true;

                                        // 終了時間の格納
                                        _taskFinishedTimeList.Add(_elapsedTime);

                                        // オーダーテーブルから削除
                                        string orderText = (tableNum+1).ToString() + "番:" + foodName;
                                        UIManager.Instance.Order_Remove(orderText);

                                        break;
                                    default:
                                        break;
                                }
                                // 音声認識オフ
                                Speech_Recognition_Manager.rec_complete = false;
                            }
                        }
                    }
                }
            }
            else if (scenario["task"] == "注文") // シナリオが注文の場合
            {
                // プレイヤーが見ているかの判定
                if (_enterCubes[tableNum].GetEnter() == 1 && IsPlayerLookAtCustomer(_avatars[tableNum]))
                {
                    // 音声認識完了チェック
                    if (Speech_Recognition_Manager.rec_complete)
                    {
                        if (FlagManager.Instance.flags[scenarioNum]) // タスクが完了していたら、Bボタン表示するだけ
                        {
                            ABbuttonUpdate(false);
                        }
                        else
                        {
                            ABbuttonUpdate(true); // Aボタン表示
                            if (OVRInput.GetDown(OVRInput.RawButton.A))
                            {
                                ABbuttonUpdate(false); // Bボタン表示
                                switch (_dialogueProgressList[scenarioNum])
                                {
                                    case 0:
                                        _animators[tableNum].SetBool("updown", false); // 手を下げる
                                        AudioManager.Instance.PlayVoice("2-1"); // 音声「注文いいでしょうか」
                                        GuidePanelUpdate(5, 9); // パネル「注文を伺いましょう」
                                        _dialogueProgressList[scenarioNum] += 1; // 会話の進行

                                        break;
                                    case 1:
                                        AudioManager.Instance.PlayVoice("2-2"); // 音声。料理名
                                        GuidePanelUpdate(5, 10); // パネル「料理名を復唱して、確認しましょう」
                                        _dialogueProgressList[scenarioNum] += 1; // 会話の進行

                                        break;
                                    case 2:
                                        AudioManager.Instance.PlayVoice("2-3"); // 音声「はい」
                                        GuidePanelUpdate(5, 8); // パネル「一言述べてから次の接客へ移りましょう。他に接客すべき人がいないか観察しましょう。」
                                        FlagManager.Instance.flags[scenarioNum] = true;

                                        // 終了時間の格納
                                        _taskFinishedTimeList.Add(_elapsedTime);

                                        break;
                                    default:
                                        break;
                                }
                                // 音声認識オフ
                                Speech_Recognition_Manager.rec_complete = false;
                            }
                        }
                    }
                }
            }
        }

        // シナリオが完了しているかの判定
        ScenarioCompletedJudge();

        // 全シナリオが完了した際の処理
        int scenarioCompFlagNum = _generatedScenarioList.Count;
        if (FlagManager.Instance.flags[scenarioCompFlagNum])
        {
            // ガイドパネルの更新
            UIManager.Instance.resultPanel.SetActive(true);
            UIManager.Instance.evaluationPanel.SetActive(true);
            UIManager.Instance.recognitionPanel.SetActive(false);
            UIManager.Instance.APanel.SetActive(false);
            UIManager.Instance.BPanel.SetActive(false);
            UIManager.Instance.guidePanel.SetActive(false);

            // 接客終了時間の表示
            UIManager.Instance.result.text = "接客タイム：\n";
            for (int i = 0; i < _taskFinishedTimeList.Count; i++)
            {
                UIManager.Instance.result.text += (i+1) + "番目終了タイム：" + (int)_taskFinishedTimeList[i] / 60 + "分" + (int)_taskFinishedTimeList[i] % 60 + "秒     ";
                if (i % 2 != 0)
                {
                    UIManager.Instance.result.text += " " + "\n";
                }
            }
        }
    }

    // BGMを流す
    void BGMActivate()
    {
        AudioManager.Instance.PlayBGM("Special To Me-Slow Edit");
        AudioManager.Instance.AttachBGMSource.loop = true;
        AudioManager.Instance.ChangeVolume(0.2f, 1f, 1f);
    }

    // テーブルに配置されたアバターをactivate
    void AvatarActivate()
    {
        foreach (var scenario in _generatedScenarioList)
        {
            if (scenario["task"] != "入店")
            {
                int tableNum = int.Parse(scenario["table"]);
                _avatars[tableNum].SetActive(true);
            }
        }
    }

    // 空き皿の配置
    void EmptyPlatesActivate()
    {
        foreach (var scenario in _generatedScenarioList)
        {
            if (scenario["task"] == "片付け")
            {
                int tableNum = int.Parse(scenario["table"]);
                _emptyPlates[tableNum].SetActive(true);
            }
        }
    }

    // 料理の配置
    void FoodArrange()
    {
        foreach (var scenario in _generatedScenarioList)
        {
            if (scenario["task"] == "配膳")
            {
                int foodNum = int.Parse(scenario["food"]);
                _foods[foodNum].SetActive(true);
            }
        }
    }

    // シナリオの自動生成
    void ScenarioGenerate()
    {
        _generatedScenarioList = new List<Dictionary<string, string>>();
        _usedTableList = new List<int>();
        _usedFoodList = new List<int>();

        _scenarioCount = Random.Range(1, 6);
        for (int i = 0; i < _scenarioCount; i++)
        {
            Dictionary<string, string> generatedScenario = new Dictionary<string, string>();

            // 業務の生成
            string task = SCENARIO_ARRAY[Random.Range(0, SCENARIO_ARRAY.Length)];
            generatedScenario.Add("task", task);

            // テーブルの割り当て
            if (task != "入店")
            {
                // 使用されていないテーブルになるまでループ
                while (true)
                {
                    int tableNumber = Random.Range(0, 6); // tableは0 ~ 5まで
                    bool isTableUsed = false;

                    foreach (int usedTableNumber in _usedTableList)
                    {
                        if (tableNumber == usedTableNumber)
                        {
                            isTableUsed = true;
                        }
                    }

                    // 未使用テーブルなら追加してループ終了
                    if (!isTableUsed)
                    {
                        _usedTableList.Add(tableNumber);
                        generatedScenario.Add("table", tableNumber.ToString());
                        break;
                    }
                }
            }

            // 料理配膳の場合は、重複しないように料理を決める
            if (task == "配膳") 
            {
                // 使用されていない料理になるまでループ
                while (true)
                {
                    int foodNumber = Random.Range(0, FOOD_ARRAY.Length);
                    bool isFoodUsed = false;

                    foreach (int usedFoodNumber in _usedFoodList)
                    {
                        if (foodNumber == usedFoodNumber)
                        {
                            isFoodUsed = true;
                        }
                    }

                    // 未使用フードなら追加してループ終了
                    if (!isFoodUsed)
                    {
                        _usedFoodList.Add(foodNumber);
                        generatedScenario.Add("food", foodNumber.ToString());
                        break;
                    }
                }
            }
            else if (task == "注文") // 注文の場合
            {
                // 重複アリで料理を決める
                int foodNumber = Random.Range(0, FOOD_ARRAY.Length);
                generatedScenario.Add("food", foodNumber.ToString());
            }

            // 生成リストに追加
            _generatedScenarioList.Add(generatedScenario);
        }
    }

    // _generatedScenarioListのログ出力
    void GeneratedScenarioLog()
    {
        for (int i = 0; i < _generatedScenarioList.Count; i++)
        {
            Debug.Log("item: " + i);
            foreach (KeyValuePair<string, string> item in _generatedScenarioList[i])
            {
                Debug.Log(item.Key + ": " + item.Value);
            }
        }
    }

    // 全シナリオが完了しているかの判定
    void ScenarioCompletedJudge()
    {
        int scenarioCompFlagNum = _generatedScenarioList.Count;
        bool _isCompleted = true;
        if (!FlagManager.Instance.flags[scenarioCompFlagNum])
        {
            for (int i = 0; i < _generatedScenarioList.Count; i++)
            {
                if (!FlagManager.Instance.flags[i])
                {
                    _isCompleted = false;
                }
            }

            // 完了している場合は、終了フラグを立てる
            if (_isCompleted)
            {
                FlagManager.Instance.flags[scenarioCompFlagNum] = true;
            }
        }
    }

    // プレイヤーが顧客を見ているかの判定
    bool IsPlayerLookAtCustomer(GameObject customer)
    {
        // カメラの方向を取得
        Vector3 cameraDirection = _playerEye.transform.forward;

        // ターゲットまでの方向を取得
        Vector3 targetDirection = customer.transform.position - _playerEye.transform.position;
        targetDirection.y = targetDirection.y + 1.50f;  //キャラの顔への方向調整

        float angle = Vector3.Angle(cameraDirection, targetDirection);

        return 0 < angle && angle < 30;
    }

    void InitializeOrderTable()
    {
        UIManager.Instance.ordertable.text = "";
        foreach (var scenario in _generatedScenarioList)
        {
            if (scenario["task"] == "配膳")
            {
                int tableNum = int.Parse(scenario["table"])+1; // scenario["table"]は0スタートだから1を足す
                string food = FOOD_ARRAY[int.Parse(scenario["food"])];
                UIManager.Instance.ordertable.text += tableNum.ToString() + "番：" + food + "\n";
            }
        }
    }

    void InitializeDialogueProgressList()
    {
        _dialogueProgressList = new List<int>();

        // シナリオの数だけ0を追加
        for (int i = 0; i < _generatedScenarioList.Count; i++)
        {
            _dialogueProgressList.Add(0);
        }
    }

    // ABボタンの更新
    void ABbuttonUpdate(bool isA)
    {
        if (isA)
        {
            UIManager.Instance.a.text = "A";
            UIManager.Instance.b.text = "";
        }
        else
        {
            UIManager.Instance.a.text = "";
            UIManager.Instance.b.text = "B";
        }
    }

    // ガイドパネルの更新
    void GuidePanelUpdate(int sheetNum, int listNum)
    {
        AudioManager.Instance.PlaySE("button");
        UIManager.Instance.guide.text = _guideList.sheets[sheetNum].list[listNum].guide;
    }
}
