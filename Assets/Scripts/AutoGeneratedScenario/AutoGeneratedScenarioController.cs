using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class AutoGeneratedScenarioController : MonoBehaviour
{
    public GameObject[] _emptyPlates;
    public GameObject[] _foods1; // FOOD_ARRAYと同じ順番になるように格納すること
    public GameObject[] _foods2; // 同上
    public GameObject[] _foods3; // 同上
    public GameObject[] _tables; // テーブル1-6を順番に格納
    public GameObject[] _chairs; // 椅子1-6を順番に格納
    public GameObject[] _avatars; // _avatars[0]はテーブル1のアバターに対応
    public GameObject _entrance; // エントランス
    public GameObject _entranceAvatar; // エントランスのアバター

    [SerializeField] CleanPlateJudge _cleanPlageJudge;
    [SerializeField] GameObject _playerEye;

    Speech_Recognition_Manager _speechRecManager;
    EnterCube[] _enterCubes = new EnterCube[6]; // enterCubeをテーブル1から6にかけて順番に格納
    EnterCube _entranceEnterCube; // エントランスのenterCube
    Animator[] _animators = new Animator[6]; // animatorをアバター1から6にかけて順番に格納
    Animator _entranceAvatarAnimator; // 入店客のanimator
    GuideList _guideList;
    List<double> _taskFinishedTimeList;
    List<int> _taskFinishedOrderList;
    List<int> _dialogueProgressList; // 各シナリオの会話の進行具合を格納したリスト
    List<int> _foodsCounterList;
    List<bool> _scenarioActivationList; // シナリオがactivateされたかを格納するリスト
    NavMeshAgent _navMeshAgent;
    int _enteredTableNum = -1; // Playerが前に立っているテーブル番号。テーブル前にいない時は-1。
    int _entranceScenarioNum = -1; // 入店タスクのシナリオ番号
    int _currentHighPriorityScenarioNum = -1; // 現在進行系の優先順位が低いシナリオ番号
    int _currentLowPriorityScenarioNum = -1; // 現在進行系の優先順位が高いシナリオ番号
    bool _isLowScenarioReadyToUpdate = true; // 現在進行形優先順位が低いのシナリオが更新準備できたかのフラグ
    bool _isHighScenarioReadyToUpdate = true; // 現在進行形優先順位が高いのシナリオが更新準備できたかのフラグ
    bool _isInEnterCube = false; // EnterCubeの中にいるかのフラグ
    double _elapsedTime; // 経過時間

    // シナリオ生成関連
    List<Dictionary<string, string>> _generatedScenarioList;
    List<int> _usedTableList;
    int _scenarioCount;
    bool _isEntranceGenerated = false;
    bool _isComplainGenerated = false;
    string[] SCENARIO_ARRAY = new string[] { "配膳", "注文", "入店", "片付け", "クレーム応対" };
    string[] FOOD_ARRAY = new string[] { "サンドウィッチセット", "ピザ", "パンケーキ", "ハンバーガーセット", "チョコレートケーキ", "バゲットセット" };

    // -----attention----- //
    /* 
    1. FlagManagerについて
    FlagManagerのフラグ番号は自動生成されたシナリオ番号と一致させる。
    シナリオが4つの場合は0-3のフラグ番号を各シナリオ完了番号と見なす。
    そして最後に全接客完了を加える（上の場合、フラグ番号4を全接客完了番号とする）。
    */

    void Start()
    {
        ScenarioGenerate();
        //GeneratedScenarioLog(); // 生成されたシナリオの確認
        AvatarActivate();
        BGMActivate();

        // EnterCubeの初期化
        for (int i = 0; i < _tables.Length; i++)
        {
            _enterCubes[i] = _tables[i].GetComponentInChildren<EnterCube>();
        }
        _entranceEnterCube = _entrance.GetComponentInChildren<EnterCube>();

        // _animatorsの初期化
        for (int i = 0; i < _avatars.Length; i++)
        {
            _animators[i] = _avatars[i].GetComponent<Animator>();
        }
        _entranceAvatarAnimator = _entranceAvatar.GetComponent<Animator>();

        // ガイドパネルの初期化
        _guideList = Resources.Load("GuideList") as GuideList;
        UIManager.Instance.guide.text = _guideList.sheets[5].list[0].guide;

        // ヒントパネルの初期化
        UIManager.Instance.hint1.text =
            "接客での注意点\n" +
            "・接客順序は、早く処理できる業務から行いましょう\n" +
            "・複数のお客様から呼び出された場合に、先に呼ばれたお客様から対応しましょう\n" +
            "・配膳はオーダー表の順に配膳するようにしましょう\n" +
            "・済んでいる皿を見かけたら声をかけ積極的に片付けましょう\n" +
            "・デザートがある場合、食事済みを確認したらすぐに配膳しましょう\n";
        UIManager.Instance.hint2.text =
            "・注文した料理はお客さんの前に置くようにしましょう\n" +
            "・済んだ皿はカウンターへ戻しましょう\n" +
            "・持ってきた料理名をお客さんに伝えましょう\n" +
            "・お客様を待たせてしまう場合には、「少々お待ちください」と声かけを行いましょう\n" +
            "・注文を取り終えた際には、注文を復唱してお客様に確認しましょう。\n" +
            "・配膳後には注文が以上であるかを確認しましょう\n";
        UIManager.Instance.hint3.text =
            "操作方法\n" +
            "・右Touchの下のボタン(Aボタン)：発話した直後に押すことでシナリオが進行\n" +
            "・右Touchの上のボタン(Bボタン)：ポーズ\n" +
            "・左Touchの下のボタン(Xボタン)：ガイドパネルの表示非表示の切り替え\n" +
            "・左Touchの上のボタン(Yボタン)：ヒントパネルの表示非表示の切り替え(全3ページ)\n" +
            "・中指にあるボタン(グリップ)：手を料理・皿の方へ向けて持つ\n" +
            "・左スティック：テレポート移動\n" +
            "・右スティック：テレポート移動後のキャラクターの向きを変更する";

        // オーダーテーブルの初期化
        UIManager.Instance.ordertable.text = "";

        // フラグマネージャーの初期化
        FlagManager.Instance.ResetFlags();

        // 音声認識クラスの起動
        if (Application.internetReachability == NetworkReachability.NotReachable)
        {
            _speechRecManager = null;
        }
        else
        {
            _speechRecManager = new Speech_Recognition_Manager();
            _speechRecManager.startRecognition();
        }

        // 接客終了時間を格納するリストの初期化
        _taskFinishedTimeList = new List<double>();

        // 接客終了順序を格納するリスト
        _taskFinishedOrderList = new List<int>();

        // 会話進行リストの初期化
        InitializeDialogueProgressList();
    }

    void Update()
    {
        // 経過時間の更新
        _elapsedTime = Time.time;

        // 各シナリオの処理
        for (int scenarioNum = 0; scenarioNum < _generatedScenarioList.Count; scenarioNum++)
        {
            var scenario = _generatedScenarioList[scenarioNum];
            int tableNum = int.Parse(scenario["table"]);
            int activateTime = int.Parse(scenario["time"]);
            bool isScenarioActivated = _scenarioActivationList[scenarioNum];

            // シナリオが片付けの場合
            if (scenario["task"] == "片付け")
            {
                if (_elapsedTime > activateTime && isScenarioActivated)
                {
                    // 片付けが終了していない状態で、テーブル前に入った瞬間の1回のみ以下を実行
                    if (_enterCubes[tableNum].GetEnter() == 1 && !_isInEnterCube && !FlagManager.Instance.flags[scenarioNum])
                    {
                        // フラグの更新
                        _isInEnterCube = true;

                        // 入ったテーブル番号の更新
                        _enteredTableNum = tableNum;

                        // ガイドパネルを更新
                        int listNum = tableNum + 1;
                        GuidePanelUpdate(5, listNum);
                    }

                    // プレイヤーが顧客を見ているかの判定
                    if (_enterCubes[tableNum].GetEnter() == 1 && IsPlayerLookAtCustomer(_avatars[tableNum]))
                    {
                        // 音声認識完了チェック
                        if (Speech_Recognition_Manager.rec_complete)
                        {
                            if (FlagManager.Instance.flags[scenarioNum]) // タスクが完了していたら、Bボタン表示するだけ
                            {
                                ABbuttonUpdate(false);
                            }
                            else
                            {
                                ABbuttonUpdate(true); // Aボタン表示
                                if (OVRInput.GetDown(OVRInput.RawButton.A))
                                {
                                    ABbuttonUpdate(false); // Bボタン表示

                                    // 音声「ありがとうございます」
                                    switch (GenderJudge(tableNum))
                                    {
                                        case "man":
                                            AudioManager.Instance.PlayVoice("thankyou_man");
                                            break;
                                        case "woman":
                                            AudioManager.Instance.PlayVoice("thankyou_woman");
                                            break;
                                    }

                                    // 音声認識オフ
                                    Speech_Recognition_Manager.rec_complete = false;
                                }
                            }
                        }
                    }

                    // テーブルから皿が片づけられたかの判定
                    string plateName = "Plate" + (tableNum + 1).ToString(); // tableNumは0-5でplateの名前は1-6だから+1する
                    if (_cleanPlageJudge.IsPlatePicked(plateName) && !FlagManager.Instance.flags[scenarioNum])
                    {
                        // 片付け完了
                        FlagManager.Instance.flags[scenarioNum] = true;
                        // 終了時間の格納
                        _taskFinishedTimeList.Add(_elapsedTime);
                        // 終了順序の格納
                        _taskFinishedOrderList.Add(scenarioNum);
                    }

                    // テーブル前にいる状態から、離れたら以下を実行
                    if (_enteredTableNum >= 0 && _enterCubes[_enteredTableNum].GetEnter() == 0 && _isInEnterCube)
                    {
                        _isInEnterCube = false;
                        _enteredTableNum = -1;
                    }
                }
                else if (_isLowScenarioReadyToUpdate && _elapsedTime > activateTime && !isScenarioActivated)
                {
                    // シナリオ番号を格納
                    _currentLowPriorityScenarioNum = scenarioNum;

                    // 空き皿を表示
                    _emptyPlates[tableNum].SetActive(true);

                    // activateをtrue
                    _scenarioActivationList[scenarioNum] = true;

                    // flagを降ろす
                    _isLowScenarioReadyToUpdate = false;
                }
            }
            else if (scenario["task"] == "配膳") // シナリオが配膳の場合
            {
                if (_elapsedTime > activateTime && isScenarioActivated)
                {
                    // プレイヤーが顧客を見ているかの判定
                    if (_enterCubes[tableNum].GetEnter() == 1 && IsPlayerLookAtCustomer(_avatars[tableNum]))
                    {
                        // 音声認識完了チェック
                        if (Speech_Recognition_Manager.rec_complete)
                        {
                            if (FlagManager.Instance.flags[scenarioNum]) // タスクが完了していたら、Bボタン表示するだけ
                            {
                                ABbuttonUpdate(false);
                            }
                            else
                            {
                                ABbuttonUpdate(true); // Aボタン表示
                                if (OVRInput.GetDown(OVRInput.RawButton.A))
                                {
                                    ABbuttonUpdate(false); // Bボタン表示
                                    string foodName = FOOD_ARRAY[int.Parse(scenario["food"])];
                                    switch (_dialogueProgressList[scenarioNum])
                                    {
                                        case 0:
                                            // 適当な料理が運ばれたかの判定
                                            if (_enterCubes[tableNum].GetObjectName().Contains(foodName))
                                            {
                                                // 適当な料理が運ばれたとき

                                                // 音声「ありがとうございます」
                                                switch (GenderJudge(tableNum))
                                                {
                                                    case "man":
                                                        AudioManager.Instance.PlayVoice("thankyou_man");
                                                        break;
                                                    case "woman":
                                                        AudioManager.Instance.PlayVoice("thankyou_woman");
                                                        break;
                                                }
                                                GuidePanelUpdate(5, 7); // 「料理をテーブルに置き、注文が以上であることを確認しましょう」
                                                _dialogueProgressList[scenarioNum] += 1; // 会話進行具合の更新
                                            }
                                            else
                                            {
                                                //間違えた料理を持ってきた場合
                                                // 音声「その料理は頼んでいません」
                                                switch (GenderJudge(tableNum))
                                                {
                                                    case "man":
                                                        AudioManager.Instance.PlayVoice("not_order_man");
                                                        break;
                                                    case "woman":
                                                        AudioManager.Instance.PlayVoice("not_order_woman");
                                                        break;
                                                }
                                            }

                                            break;
                                        case 1:
                                            // 音声「はい」
                                            switch (GenderJudge(tableNum))
                                            {
                                                case "man":
                                                    AudioManager.Instance.PlayVoice("yes_man");
                                                    break;
                                                case "woman":
                                                    AudioManager.Instance.PlayVoice("yes_woman");
                                                    break;
                                            }

                                            GuidePanelUpdate(5, 8); // 「一言述べてから次の接客へ移りましょう。他に接客すべき人がいないか観察しましょう」
                                            FlagManager.Instance.flags[scenarioNum] = true;

                                            // 終了時間の格納
                                            _taskFinishedTimeList.Add(_elapsedTime);

                                            // 終了順序の格納
                                            _taskFinishedOrderList.Add(scenarioNum);

                                            // オーダーテーブルから削除
                                            string orderText = (tableNum + 1).ToString() + "番：" + foodName;
                                            UIManager.Instance.Order_Remove(orderText);

                                            break;
                                        default:
                                            break;
                                    }
                                    // 音声認識オフ
                                    Speech_Recognition_Manager.rec_complete = false;
                                }
                            }
                        }
                    }
                }

                else if (_isHighScenarioReadyToUpdate && _elapsedTime > activateTime && !isScenarioActivated)
                {
                    // 料理の表示
                    int foodNum = int.Parse(scenario["food"]);
                    switch (_foodsCounterList[foodNum])
                    {
                        case 0:
                            _foods1[foodNum].SetActive(true);
                            _foodsCounterList[foodNum] ++;
                            break;
                        case 1:
                            _foods2[foodNum].SetActive(true);
                            _foodsCounterList[foodNum]++;
                            break;
                        case 2:
                            _foods3[foodNum].SetActive(true);
                            _foodsCounterList[foodNum]++;
                            break;
                    }

                    // オーダーテーブルへの書き込み
                    string food = FOOD_ARRAY[int.Parse(scenario["food"])];
                    UIManager.Instance.ordertable.text += (tableNum+1).ToString() + "番：" + food + "\n";

                    // activateをtrue
                    _scenarioActivationList[scenarioNum] = true;

                    // 更新フラグを降ろす
                    _isHighScenarioReadyToUpdate = false;

                    // current scenarioを格納
                    _currentHighPriorityScenarioNum = scenarioNum;
                }
            }
            else if (scenario["task"] == "注文") // シナリオが注文の場合
            {
                if (_elapsedTime > activateTime && isScenarioActivated)
                {
                    // プレイヤーが見ているかの判定
                    if (_enterCubes[tableNum].GetEnter() == 1 && IsPlayerLookAtCustomer(_avatars[tableNum]))
                    {
                        // 声掛けのパネルの表示
                        if (!FlagManager.Instance.flags[_currentHighPriorityScenarioNum] && !_isInEnterCube && !FlagManager.Instance.flags[scenarioNum])
                        {
                            // ガイドパネルの表示
                            GuidePanelUpdate(5, 20);

                            // フラグの更新
                            _isInEnterCube = true;

                            // 入ったテーブル番号の更新
                            _enteredTableNum = tableNum;
                        }

                        // 音声認識完了チェック
                        if (Speech_Recognition_Manager.rec_complete)
                        {
                            if (FlagManager.Instance.flags[scenarioNum]) // タスクが完了していたら、Bボタン表示するだけ
                            {
                                ABbuttonUpdate(false);
                            }
                            else
                            {
                                ABbuttonUpdate(true); // Aボタン表示
                                if (OVRInput.GetDown(OVRInput.RawButton.A))
                                {
                                    ABbuttonUpdate(false); // Bボタン表示

                                    // 声掛け
                                    if (!FlagManager.Instance.flags[_currentHighPriorityScenarioNum])
                                    {
                                        // 音声「はい」
                                        switch (GenderJudge(tableNum))
                                        {
                                            case "man":
                                                AudioManager.Instance.PlayVoice("yes_man");
                                                break;
                                            case "woman":
                                                AudioManager.Instance.PlayVoice("yes_woman");
                                                break;
                                        }
                                        GuidePanelUpdate(5, 21); // パネル「優先度の高いタスクを先にこなしましょう」
                                    }
                                    else
                                    {
                                        switch (_dialogueProgressList[scenarioNum])
                                        {
                                            case 0:
                                                _animators[tableNum].SetBool("updown", false); // 手を下げる

                                                // 音声「注文いいでしょうか」
                                                switch (GenderJudge(tableNum))
                                                {
                                                    case "man":
                                                        AudioManager.Instance.PlayVoice("order_ok_man");
                                                        break;
                                                    case "woman":
                                                        AudioManager.Instance.PlayVoice("order_ok_woman");
                                                        break;
                                                }

                                                GuidePanelUpdate(5, 9); // パネル「注文を伺いましょう」
                                                _dialogueProgressList[scenarioNum] += 1; // 会話の進行

                                                break;
                                            case 1:
                                                // 適当なvoiceファイルを取得
                                                string voiceFileName = "";
                                                int foodNumber = int.Parse(scenario["food"]);
                                                string gender = GenderJudge(tableNum);
                                                switch (FOOD_ARRAY[foodNumber])
                                                {
                                                    case "サンドウィッチセット":
                                                        voiceFileName = gender == "man" ? "sandwitch_man" : "sandwitch_woman";
                                                        break;
                                                    case "ピザ":
                                                        voiceFileName = gender == "man" ? "pizza_man" : "pizza_woman";
                                                        break;
                                                    case "パンケーキ":
                                                        voiceFileName = gender == "man" ? "pancake_man" : "pancake_woman";
                                                        break;
                                                    case "ハンバーガーセット":
                                                        voiceFileName = gender == "man" ? "hamburger_man" : "hamburger_woman";
                                                        break;
                                                    case "チョコレートケーキ":
                                                        voiceFileName = gender == "man" ? "chocolatecake_man" : "chocolatecake_woman";
                                                        break;
                                                    case "バゲットセット":
                                                        voiceFileName = gender == "man" ? "baguette_man" : "baguette_woman";
                                                        break;
                                                }
                                                AudioManager.Instance.PlayVoice(voiceFileName); // 音声。料理名

                                                GuidePanelUpdate(5, 10); // パネル「料理名を復唱して、確認しましょう」
                                                _dialogueProgressList[scenarioNum] += 1; // 会話の進行

                                                break;
                                            case 2:
                                                // 音声「はい」
                                                switch (GenderJudge(tableNum))
                                                {
                                                    case "man":
                                                        AudioManager.Instance.PlayVoice("yes_man");
                                                        break;
                                                    case "woman":
                                                        AudioManager.Instance.PlayVoice("yes_woman");
                                                        break;
                                                }

                                                GuidePanelUpdate(5, 8); // パネル「一言述べてから次の接客へ移りましょう。他に接客すべき人がいないか観察しましょう。」
                                                FlagManager.Instance.flags[scenarioNum] = true;

                                                // 終了時間の格納
                                                _taskFinishedTimeList.Add(_elapsedTime);

                                                // 終了順序の格納
                                                _taskFinishedOrderList.Add(scenarioNum);

                                                break;
                                            default:
                                                break;
                                        }
                                    }
                                    // 音声認識オフ
                                    Speech_Recognition_Manager.rec_complete = false;
                                }
                            }
                        }
                    }

                    // テーブル前にいる状態から、離れたら以下を実行
                    if (_enteredTableNum >= 0 && _enterCubes[_enteredTableNum].GetEnter() == 0 && _isInEnterCube)
                    {
                        _isInEnterCube = false;
                        _enteredTableNum = -1;
                    }
                }
                else if (_isLowScenarioReadyToUpdate && _elapsedTime > activateTime && !isScenarioActivated)
                {
                    // 手を挙げる
                    _animators[tableNum].SetBool("updown", true);

                    // activateをtrue
                    _scenarioActivationList[scenarioNum] = true;

                    // 更新フラグを降ろす
                    _isLowScenarioReadyToUpdate = false;

                    // current scenarioを更新
                    _currentLowPriorityScenarioNum = scenarioNum;
                }
            }
            else if (scenario["task"] == "入店")
            {
                if (_elapsedTime > activateTime && isScenarioActivated)
                {
                    if (_entranceEnterCube.GetEnter() == 1)
                    {
                        // ガイドパネル「入店客の接客を行いましょう」の表示
                        if (!FlagManager.Instance.flags[scenarioNum] && !_isInEnterCube)
                        {
                            GuidePanelUpdate(5, 11);
                            _isInEnterCube = true;
                        }

                        // 視線の確認
                        if (IsPlayerLookAtCustomer(_entranceAvatar))
                        {
                            // 音声認識完了のチェック
                            if (Speech_Recognition_Manager.rec_complete)
                            {
                                if (!FlagManager.Instance.flags[scenarioNum])
                                {
                                    ABbuttonUpdate(true); // Aボタン表示
                                    if (OVRInput.GetDown(OVRInput.RawButton.A))
                                    {
                                        ABbuttonUpdate(false); // Bボタン表示
                                        switch (_dialogueProgressList[scenarioNum])
                                        {
                                            case 0:
                                                AudioManager.Instance.PlayVoice("entrance"); // 音声「2名です。後から1人きます」
                                                                                        // 対応するテーブルへの誘導のガイドパネルを表示
                                                switch (tableNum)
                                                {
                                                    case 0:
                                                        GuidePanelUpdate(5, 12); // ガイドパネル「空いているテーブルへと案内しましょう。現在は1番テーブルがあいています」
                                                        break;
                                                    case 1:
                                                        GuidePanelUpdate(5, 13); // ガイドパネル「空いているテーブルへと案内しましょう。現在は2番テーブルがあいています」
                                                        break;
                                                    case 2:
                                                        GuidePanelUpdate(5, 14); // ガイドパネル「空いているテーブルへと案内しましょう。現在は3番テーブルがあいています」
                                                        break;
                                                    case 3:
                                                        GuidePanelUpdate(5, 15); // ガイドパネル「空いているテーブルへと案内しましょう。現在は4番テーブルがあいています」
                                                        break;
                                                    case 4:
                                                        GuidePanelUpdate(5, 16); // ガイドパネル「空いているテーブルへと案内しましょう。現在は5番テーブルがあいています」
                                                        break;
                                                    case 5:
                                                        GuidePanelUpdate(5, 17); // ガイドパネル「空いているテーブルへと案内しましょう。現在は6番テーブルがあいています」
                                                        break;
                                                    default:
                                                        break;
                                                }
                                                _dialogueProgressList[scenarioNum] += 1;

                                                break;
                                            case 1:
                                                AudioManager.Instance.PlayVoice("yes_man"); // 音声「はい」
                                                GuidePanelUpdate(2, 0); // ガイドパネル「接客、もしくは片付け等がないか探して、処理しましょう。」
                                                FlagManager.Instance.flags[scenarioNum] = true;

                                                // 終了時間の格納
                                                _taskFinishedTimeList.Add(_elapsedTime);

                                                // 終了順序の格納
                                                _taskFinishedOrderList.Add(scenarioNum);

                                                break;
                                            default:
                                                break;
                                        }
                                        Speech_Recognition_Manager.rec_complete = false;
                                    }
                                }
                            }
                        }
                    }
                }
                else if (_isHighScenarioReadyToUpdate && _elapsedTime > activateTime && !isScenarioActivated)
                {
                    // 入店客の表示
                    _entranceAvatar.SetActive(true);
                    _navMeshAgent = _entranceAvatar.GetComponent<NavMeshAgent>();

                    // activateをtrue
                    _scenarioActivationList[scenarioNum] = true;

                    // 更新フラグを降ろす
                    _isHighScenarioReadyToUpdate = false;

                    // curent scenarioを更新
                    _currentHighPriorityScenarioNum = scenarioNum;
                }

                // エントランスから離れたらガイドパネルの非表示
                if (_entranceEnterCube.GetEnter() == 0 && _isInEnterCube && _enteredTableNum < 0)
                {
                    _isInEnterCube = false;
                }
            }
            else if (scenario["task"] == "クレーム応対")
            {
                if (_elapsedTime > activateTime && isScenarioActivated)
                {
                    // プレイヤーが見ているかの判定
                    if (_enterCubes[tableNum].GetEnter() == 1 && IsPlayerLookAtCustomer(_avatars[tableNum]))
                    {
                        // 音声認識完了チェック
                        if (Speech_Recognition_Manager.rec_complete)
                        {
                            if (FlagManager.Instance.flags[scenarioNum]) // タスクが完了していたら、Bボタン表示するだけ
                            {
                                ABbuttonUpdate(false);
                            }
                            else
                            {
                                ABbuttonUpdate(true); // Aボタン表示
                                if (OVRInput.GetDown(OVRInput.RawButton.A))
                                {
                                    ABbuttonUpdate(false); // Bボタン表示
                                    switch (_dialogueProgressList[scenarioNum])
                                    {
                                        case 0:
                                            _animators[tableNum].SetBool("updown", false); // 手を下げる

                                            // 音声「すみません、ちょっといいですか」
                                            switch (GenderJudge(tableNum))
                                            {
                                                case "man":
                                                    AudioManager.Instance.PlayVoice("excuse_me_man");
                                                    break;
                                                case "woman":
                                                    AudioManager.Instance.PlayVoice("excuse_me_woman");
                                                    break;
                                            }

                                            GuidePanelUpdate(5, 18); // パネル「お客様の話を聞きましょう」
                                            _dialogueProgressList[scenarioNum] += 1; // 会話の進行

                                            break;
                                        case 1:
                                            // 音声「先程の店員の接客態度が悪かったのですが」
                                            switch (GenderJudge(tableNum))
                                            {
                                                case "man":
                                                    AudioManager.Instance.PlayVoice("bad_manner_man");
                                                    break;
                                                case "woman":
                                                    AudioManager.Instance.PlayVoice("bad_manner_woman");
                                                    break;
                                            }

                                            GuidePanelUpdate(5, 19); // パネル「謝罪して、後ほど注意しておくよう伝えましょう」
                                            _dialogueProgressList[scenarioNum] += 1; // 会話の進行

                                            break;
                                        case 2:
                                            // 音声「はい、以後気を付けてください」
                                            switch (GenderJudge(tableNum))
                                            {
                                                case "man":
                                                    AudioManager.Instance.PlayVoice("be_careful_man");
                                                    break;
                                                case "woman":
                                                    AudioManager.Instance.PlayVoice("be_careful_woman");
                                                    break;
                                            }

                                            GuidePanelUpdate(5, 0); // パネル「接客、もしくは片付け等がないか探して、処理しましょう。」
                                            FlagManager.Instance.flags[scenarioNum] = true;

                                            // 終了時間の格納
                                            _taskFinishedTimeList.Add(_elapsedTime);

                                            // 終了順序の格納
                                            _taskFinishedOrderList.Add(scenarioNum);

                                            break;
                                        default:
                                            break;
                                    }
                                    Speech_Recognition_Manager.rec_complete = false;
                                }
                            }
                        }
                    }
                }
                else if (_isHighScenarioReadyToUpdate && _elapsedTime > activateTime && !isScenarioActivated)
                {
                    // 手を挙げる
                    _animators[tableNum].SetBool("updown", true);

                    // activateをtrue
                    _scenarioActivationList[scenarioNum] = true;

                    // 更新フラグを降ろす
                    _isHighScenarioReadyToUpdate = false;

                    // current scenarioを更新
                    _currentHighPriorityScenarioNum = scenarioNum;
                }
            }
        }

        // 入店客の移動
        if (_entranceScenarioNum >= 0 && FlagManager.Instance.flags[_entranceScenarioNum])
        {
            int tableNum = int.Parse(_generatedScenarioList[_entranceScenarioNum]["table"]);
            _navMeshAgent.SetDestination(_chairs[tableNum].transform.position);
            _entranceAvatarAnimator.SetBool("walk", true);
            _entranceAvatar.GetComponent<LookAtController>().enabled = false;

            if (Vector3.Distance(_chairs[tableNum].transform.position, _entranceAvatar.transform.position) < 1)
            {
                if (tableNum > 1) // table 2, 3, 4, 5の場合
                {
                    _entranceAvatar.transform.rotation = Quaternion.Slerp(_entranceAvatar.transform.rotation, Quaternion.Euler(0f, 0f, 0f), 0.2f);
                }
                else // table 0, 1の場合
                {
                    _entranceAvatar.transform.rotation = Quaternion.Slerp(_entranceAvatar.transform.rotation, Quaternion.Euler(0f, 90f, 0f), 0.2f);
                }
            }

            if (Vector3.Distance(_chairs[tableNum].transform.position, _entranceAvatar.transform.position) < 0.71)
            {
                _entranceAvatarAnimator.SetBool("sitting", true);
            }
        }

        // 現在進行形のシナリオを更新
        if (_currentLowPriorityScenarioNum >= 0 && _currentHighPriorityScenarioNum >= 0 && !_isLowScenarioReadyToUpdate && !_isHighScenarioReadyToUpdate && FlagManager.Instance.flags[_currentLowPriorityScenarioNum] && FlagManager.Instance.flags[_currentHighPriorityScenarioNum])
        {
            _isLowScenarioReadyToUpdate = true;
            _isHighScenarioReadyToUpdate = true;
        }

        // シナリオが完了しているかの判定
        ScenarioCompletedJudge();

        // 全シナリオが完了した際の処理
        int scenarioCompFlagNum = _generatedScenarioList.Count;
        if (FlagManager.Instance.flags[scenarioCompFlagNum])
        {
            // ガイドパネルの更新
            UIManager.Instance.resultPanel.SetActive(true);
            UIManager.Instance.evaluationPanel.SetActive(true);
            UIManager.Instance.recognitionPanel.SetActive(false);
            UIManager.Instance.APanel.SetActive(false);
            UIManager.Instance.BPanel.SetActive(false);
            UIManager.Instance.guidePanel.SetActive(false);

            // 接客終了時間の表示
            UIManager.Instance.result.text = "接客タイム：\n";
            for (int i = 0; i < _taskFinishedTimeList.Count; i++)
            {
                UIManager.Instance.result.text += (i+1) + "番目終了タイム：" + (int)_taskFinishedTimeList[i] / 60 + "分" + (int)_taskFinishedTimeList[i] % 60 + "秒     ";
                if (i % 2 != 0)
                {
                    UIManager.Instance.result.text += " " + "\n";
                }
            }

            // 接客終了順序の表示
            UIManager.Instance.evaluation.text = "接客順序：\n";
            for (int i = 0; i < _taskFinishedOrderList.Count; i++)
            {
                int scenarioNum = _taskFinishedOrderList[i];
                string task = _generatedScenarioList[scenarioNum]["task"];
                int tableNum = int.Parse(_generatedScenarioList[scenarioNum]["table"]) + 1;
                UIManager.Instance.evaluation.text += (i+1) + "番目：" + tableNum + "番テーブル " + task + "    ";
                if (i % 2 == 1)
                {
                    UIManager.Instance.evaluation.text += "\n";
                }
            }
        }
    }

    // BGMを流す
    void BGMActivate()
    {
        AudioManager.Instance.PlayBGM("Special To Me-Slow Edit");
        AudioManager.Instance.AttachBGMSource.loop = true;
        AudioManager.Instance.ChangeVolume(0.2f, 1f, 1f);
    }

    // テーブルに配置されたアバターをactivate
    void AvatarActivate()
    {
        foreach (var scenario in _generatedScenarioList)
        {
            if (scenario["task"] != "入店")
            {
                int tableNum = int.Parse(scenario["table"]);
                _avatars[tableNum].SetActive(true);
            }
        }
    }

    // シナリオの自動生成
    void ScenarioGenerate()
    {
        _generatedScenarioList = new List<Dictionary<string, string>>();
        _scenarioActivationList = new List<bool>();
        _usedTableList = new List<int>();
        _foodsCounterList = new List<int>() { 0, 0, 0, 0, 0, 0 };

        _scenarioCount = Random.Range(3, 7); // シナリオの個数は３〜６でランダム
        for (int i = 0; i < _scenarioCount; i++)
        {
            Dictionary<string, string> generatedScenario = new Dictionary<string, string>();

            // 偶数番目のタスク生成の際は一つ前のタスクと異なる優先順位のタスクが生成されるようにする。
            string task;
            while (true)
            {
                // 業務の生成
                task = SCENARIO_ARRAY[Random.Range(0, SCENARIO_ARRAY.Length)];

                if (task == "入店" && !_isEntranceGenerated) // 入店タスクは多くて1回のみにする
                {
                    if (i % 2 == 1)
                    {
                        string prevTask = _generatedScenarioList[i-1]["task"];
                        if (IsTaskDifferentPriority(prevTask, task)) 
                        {
                            generatedScenario.Add("task", task);
                            _entranceScenarioNum = i;
                            _isEntranceGenerated = true;
                            break;
                        }
                    }
                    else
                    {
                        generatedScenario.Add("task", task);
                        _entranceScenarioNum = i;
                        _isEntranceGenerated = true;
                        break;
                    }
                }
                else if (task == "クレーム応対" && !_isComplainGenerated) // クレーム応対は多くて1回のみにする
                {
                    if (i % 2 == 1)
                    {
                        string prevTask = _generatedScenarioList[i - 1]["task"];
                        if (IsTaskDifferentPriority(prevTask, task))
                        {
                            generatedScenario.Add("task", task);
                            _isComplainGenerated = true;
                            break;
                        }
                    }
                    else
                    {
                        generatedScenario.Add("task", task);
                        _isComplainGenerated = true;
                        break;
                    }
                }
                else if (task != "入店" && task != "クレーム応対")
                {
                    if (i % 2 == 1)
                    {
                        string prevTask = _generatedScenarioList[i - 1]["task"];
                        if (IsTaskDifferentPriority(prevTask, task))
                        {
                            generatedScenario.Add("task", task);
                            break;
                        }
                    }
                    else
                    {
                        generatedScenario.Add("task", task);
                        break;
                    }
                }
            }

            // テーブルの割り当て
            // 使用されていないテーブルになるまでループ
            while (true)
            {
                int tableNumber = Random.Range(0, 6); // tableは0 ~ 5まで
                bool isTableUsed = false;

                foreach (int usedTableNumber in _usedTableList)
                {
                    if (tableNumber == usedTableNumber)
                    {
                        isTableUsed = true;
                    }
                }

                // 未使用テーブルなら追加してループ終了
                if (!isTableUsed)
                {
                    _usedTableList.Add(tableNumber);
                    generatedScenario.Add("table", tableNumber.ToString());
                    break;
                }
            }

            if (task == "注文" || task == "配膳") // 注文、配膳の場合
            {
                // 重複アリで料理を決める
                int foodNumber = Random.Range(0, FOOD_ARRAY.Length);
                generatedScenario.Add("food", foodNumber.ToString());
            }

            // 時間の割り当て
            // 1~2個目のシナリオは0秒
            // 3~4個目のシナリオは30秒
            // 5~6個目のシナリオは60秒
            int time = Mathf.FloorToInt(i / 2) * 30;
            generatedScenario.Add("time", time.ToString());

            // activationListへの追加
            _scenarioActivationList.Add(false);

            // 生成リストに追加
            _generatedScenarioList.Add(generatedScenario);
        }
    }

    // タスクの優先順位が異なるかを判断
    bool IsTaskDifferentPriority(string taskA, string taskB)
    {
        bool isTaskAHighPriority = false;
        bool isTaskBHighPriority = false;

        if (taskA == "入店" || taskA == "クレーム応対" || taskA == "配膳")
        {
            isTaskAHighPriority = true;
        }
        if (taskB == "入店" || taskB == "クレーム応対" || taskB == "配膳")
        {
            isTaskBHighPriority = true;
        }

        return isTaskAHighPriority != isTaskBHighPriority;
    }

    // _generatedScenarioListのログ出力
    void GeneratedScenarioLog()
    {
        for (int i = 0; i < _generatedScenarioList.Count; i++)
        {
            Debug.Log("item: " + i);
            foreach (KeyValuePair<string, string> item in _generatedScenarioList[i])
            {
                Debug.Log(item.Key + ": " + item.Value);
            }
        }
    }

    // 全シナリオが完了しているかの判定
    void ScenarioCompletedJudge()
    {
        int scenarioCompFlagNum = _generatedScenarioList.Count;
        bool _isCompleted = true;
        if (!FlagManager.Instance.flags[scenarioCompFlagNum])
        {
            for (int i = 0; i < _generatedScenarioList.Count; i++)
            {
                if (!FlagManager.Instance.flags[i])
                {
                    _isCompleted = false;
                }
            }

            // 完了している場合は、終了フラグを立てる
            if (_isCompleted)
            {
                FlagManager.Instance.flags[scenarioCompFlagNum] = true;
            }
        }
    }

    // プレイヤーが顧客を見ているかの判定
    bool IsPlayerLookAtCustomer(GameObject customer)
    {
        // カメラの方向を取得
        Vector3 cameraDirection = _playerEye.transform.forward;

        // ターゲットまでの方向を取得
        Vector3 targetDirection = customer.transform.position - _playerEye.transform.position;
        targetDirection.y = targetDirection.y + 1.50f;  //キャラの顔への方向調整

        float angle = Vector3.Angle(cameraDirection, targetDirection);

        return 0 < angle && angle < 30;
    }

    string GenderJudge(int tableNum)
    {
        if (tableNum % 2 == 0)
        {
            return "woman";
        } 
        else
        {
            return "man";
        }
    }

    void InitializeDialogueProgressList()
    {
        _dialogueProgressList = new List<int>();

        // シナリオの数だけ0を追加
        for (int i = 0; i < _generatedScenarioList.Count; i++)
        {
            _dialogueProgressList.Add(0);
        }
    }

    // ABボタンの更新
    void ABbuttonUpdate(bool isA)
    {
        if (isA)
        {
            UIManager.Instance.a.text = "A";
            UIManager.Instance.b.text = "";
        }
        else
        {
            UIManager.Instance.a.text = "";
            UIManager.Instance.b.text = "B";
        }
    }

    // ガイドパネルの更新
    void GuidePanelUpdate(int sheetNum, int listNum)
    {
        AudioManager.Instance.PlaySE("button");
        UIManager.Instance.guide.text = _guideList.sheets[sheetNum].list[listNum].guide;
    }
}
