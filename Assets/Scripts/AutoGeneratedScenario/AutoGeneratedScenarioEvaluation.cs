using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.IO;

public class AutoGeneratedScenarioEvaluation : MonoBehaviour
{
    List<int> _usedTableList;
    List<int> _usedFoodList;
    int _scenarioCount;
    bool _isEntranceGenerated = false;
    bool _isComplainGenerated = false;
    string[] SCENARIO_ARRAY = new string[] { "配膳", "注文", "入店", "片付け", "クレーム応対" };
    string[] FOOD_ARRAY = new string[] { "サンドウィッチセット", "ピザ", "パンケーキ", "ハンバーガーセット", "チョコレートケーキ", "バゲットセット" };

    [System.Serializable]
    public class ScenarioData
    {
        public string task;
        public int table;
        public int food;
    }

    [System.Serializable]
    public class ScenarioCollection
    {
        public List<ScenarioData> scenarioList { get; set; }
    };
    ScenarioCollection _scenarioCollection;

    void Start()
    {
        ScenarioGenerate();
        ScenarioEvaluate();
    }

    // シナリオの自動生成
    void ScenarioGenerate()
    {
        _scenarioCollection = new ScenarioCollection
        {
            scenarioList = new List<ScenarioData>()
        };
        _usedTableList = new List<int>();
        _usedFoodList = new List<int>();

        _scenarioCount = Random.Range(1, 6);
        for (int i = 0; i < _scenarioCount; i++)
        {
            ScenarioData scenarioData = new ScenarioData();

            string task;
            while (true)
            {
                // 業務の生成
                task = SCENARIO_ARRAY[Random.Range(0, SCENARIO_ARRAY.Length)];

                // 入店タスクは多くて1回のみにする
                if (task == "入店" && !_isEntranceGenerated)
                {
                    scenarioData.task = task;
                    _isEntranceGenerated = true;
                    break;
                }
                else if (task == "クレーム応対" && !_isComplainGenerated) // クレーム応対は多くて1回のみにする
                {
                    scenarioData.task = task;
                    _isComplainGenerated = true;
                    break;
                }
                else if (task != "入店" && task != "クレーム応対")
                {
                    scenarioData.task = task;
                    break;
                }
            }

            // テーブルの割り当て
            // 使用されていないテーブルになるまでループ
            while (true)
            {
                int tableNumber = Random.Range(0, 6); // tableは0 ~ 5まで
                bool isTableUsed = false;

                foreach (int usedTableNumber in _usedTableList)
                {
                    if (tableNumber == usedTableNumber)
                    {
                        isTableUsed = true;
                    }
                }

                // 未使用テーブルなら追加してループ終了
                if (!isTableUsed)
                {
                    _usedTableList.Add(tableNumber);
                    scenarioData.table = tableNumber;
                    break;
                }
            }

            // 料理配膳の場合は、重複しないように料理を決める
            if (task == "配膳")
            {
                // 使用されていない料理になるまでループ
                while (true)
                {
                    int foodNumber = Random.Range(0, FOOD_ARRAY.Length);
                    bool isFoodUsed = false;

                    foreach (int usedFoodNumber in _usedFoodList)
                    {
                        if (foodNumber == usedFoodNumber)
                        {
                            isFoodUsed = true;
                        }
                    }

                    // 未使用フードなら追加してループ終了
                    if (!isFoodUsed)
                    {
                        _usedFoodList.Add(foodNumber);
                        scenarioData.food = foodNumber;
                        break;
                    }
                }
            }
            else if (task == "注文") // 注文の場合
            {
                // 重複アリで料理を決める
                int foodNumber = Random.Range(0, FOOD_ARRAY.Length);
                scenarioData.food = foodNumber;
            } 
            else
            {
                scenarioData.food = -1;
            }

            // 生成リストに追加
            _scenarioCollection.scenarioList.Add(scenarioData);
        }
    }

    void ScenarioEvaluate()
    {
        var json = JsonUtility.ToJson(_scenarioCollection);
        string savePath = Path.Combine(Application.dataPath, "auto_generated_scenario.json");
        File.WriteAllText(savePath, json);
    }
}
